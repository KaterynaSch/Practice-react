{"version":3,"file":"static/js/158.1d05fdb5.chunk.js","mappings":"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","sources":["components/BackLink.js","components/ErrorMessage.js","components/api.js","components/PracticeCaptcha/PracticeCaptcha.js","components/QuizForm/QuizForm.styled.js","components/QuizForm/QuizForm.js","pages/CreateQuizPage.js"],"sourcesContent":["import { Link } from \"react-router-dom\";\nimport { IoIosArrowDropleft  } from \"react-icons/io\";\n\nexport const BackLink = ({to = '/', children}) => {\n    return (\n        <Link to={to}>\n            <IoIosArrowDropleft  />\n            {children}</Link>\n    );\n};","import styled from 'styled-components';\n\nexport const ErrorMessage = styled.b`\n    color :${p => p.theme.colors.errorColor};\n    font-size: 14px;   \n`","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://65ad1da4adbd5aa31be023a4.mockapi.io/api';\n\nexport const fetchQuizzes = async() => {\n    const response = await axios.get('/quizzes');\n    return response.data;\n};\n\nexport const fetchQuizById = async(quizId) => {\n    const response = await axios.get(`/quizzes/${quizId}`);\n    return response.data;\n};\n\nexport const createQuiz = async(quiz) => {\n    const response = await axios.post('/quizzes', quiz);\n    return response.data;\n};\n\nexport const deleteQuizById = async(quizId) => {\n    const response = await axios.delete(`/quizzes/${quizId}`);\n    return response.data;\n};","import React, { forwardRef } from 'react';\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\n const PracticeCaptcha =forwardRef(({ onChange }, ref)  => {\n    // const key = '6LeiHlYpAAAAAAUZdmy1Ovkjl7Ww-F4DbP_LvT_1'\n    const key = '6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI'\n        \n    const handleChange =(value) =>  {\n        console.log(\"Captcha value:\", value);\n        onChange(value);\n      }\n\n    return (        \n        <ReCAPTCHA\n            ref={ref}\n            sitekey={key}\n            onChange={handleChange}\n        />                \n    );\n});\n\nexport default PracticeCaptcha;\n\n// import React, { useState } from 'react';\n// import ReCAPTCHA from 'react-google-recaptcha';\n\n// const RegisterForm = () => {\n//   const [recaptchaToken, setRecaptchaToken] = useState('');\n\n//   const handleRecaptchaChange = (token) => {\n//     setRecaptchaToken(token);\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     // Отримайте `recaptchaToken` та відправте його разом з іншими даними на сервер для перевірки.\n//     console.log('recaptchaToken:', recaptchaToken);\n//     // Додаткова логіка для обробки реєстрації...\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       {/* Додайте компонент ReCAPTCHA */}\n//       <ReCAPTCHA\n//         sitekey=\"ВАШ_SITE_KEY\"\n//         onChange={handleRecaptchaChange}\n//       />\n//       <button type=\"submit\">Зареєструватися</button>\n//     </form>\n//   );\n// };\n\n// export default RegisterForm;\n\n// перевірка токену на сервері\n// const axios = require('axios');\n\n// Функція для перевірки токену reCAPTCHA на сервері\n// async function verifyRecaptchaToken(token) {\n//   const secretKey = 'ВАШ_SECRET_KEY';\n//   const url = 'https://www.google.com/recaptcha/api/siteverify';\n\n//   try {\n//     const response = await axios.post(url, null, {\n//       params: {\n//         secret: secretKey,\n//         response: token,\n//       },\n//     });\n\n//     const { success, score } = response.data;\n//     // Результат перевірки токену\n//     return { success, score };\n//   } catch (error) {\n//     console.error('Помилка перевірки reCAPTCHA токену:', error);\n//     return { success: false, score: 0 };\n//   }\n// }\n\n\n// const token = 'ТОКЕН_З_КЛІЄНТА';\n// verifyRecaptchaToken(token)\n//   .then((result) => {\n//     console.log('Результат перевірки:', result);\n//     // Обробка результату перевірки токену\n//   })\n//   .catch((error) => {\n//     console.error('Помилка перевірки токену:', error);\n//   });\n","import styled from \"styled-components\";\nimport { Form, Field, ErrorMessage } from \"formik\";\n\nexport const StyledForm = styled(Form)`\n    padding: ${p => p.theme.spacing(4)};\n    display: flex;\n    flex-direction: column;\n    gap: ${p => p.theme.spacing(6)};\n    border: 1px solid ${p => p.theme.colors.secondaryColor};\n    border-radius: ${p => p.theme.radius.l};\n`\nexport const StyledLabel = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: ${p => p.theme.spacing(2)};  \n    color: ${p => p.theme.colors.secondaryColor};\n`\n\nexport const StyledField = styled(Field)`      \n    padding: ${p => p.theme.spacing(2)} ${p => p.theme.spacing(4)};\n    outline: transparent;\n    border: 1px solid ${p => p.theme.colors.borderColor};\n    border-radius: ${p => p.theme.radius.m};    \n    filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.15));   \n`\nexport const StyledErrMessage = styled(ErrorMessage)`\n    color: ${p => p.theme.colors.errorColor};\n    font-size: 12px;\n`\nexport const FormButton = styled.button`\n    font-weight: 500; \n    width:150px;\n    font-size: ${p => p.theme.spacing(4)};\n    padding: ${p => p.theme.spacing(1)};   \n    border: 1px solid ${p => p.theme.colors.borderColor};\n    border-radius: ${p => p.theme.radius.m};\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    color: ${p => p.theme.colors.white};\n    background-color: ${p => p.theme.colors.accentColor};\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);        \n\n    &:hover,\n    &:focus {\n        background-color: ${p => p.theme.colors.secondaryColor};       \n    }\n    \n\n    @media only screen and (min-width: 768px) {\n        font-size: ${p => p.theme.spacing(5)};\n        padding: ${p => p.theme.spacing(2)};      \n    }\n`","import { Formik} from 'formik';\nimport * as Yup from 'yup';\nimport { useRef, useState } from 'react';\n\nimport  PracticeCaptcha  from 'components/PracticeCaptcha/PracticeCaptcha';\nimport { StyledErrMessage, StyledField, StyledForm, StyledLabel, FormButton } from './QuizForm.styled';\n\nconst QuizSchema = Yup.object().shape({\n    topic: Yup.string().min(3, 'Too Short!').required('Required'),\n    time: Yup.number().min(10, 'Min 10 mins').max(30, 'Max 30 mins').required('Required'),\n    questions: Yup.number().min(5, 'Min 5 questions').max(20, 'Max 30 questions').required('Required'),\n    level: Yup.string().oneOf(['beginner', 'intermediate', 'advanced']).required('Required')    \n})\n\nexport const QuizForm = ({onAdd}) => {\n  const [captchaValue, setCaptchaValue] = useState('');\n  const recaptchaRef = useRef();\n\n  return (      \n        <Formik\n        initialValues={{//початкове значення\n          topic: '',\n          time: 0,\n          questions: 0,\n          level: 'beginner'\n        }}\n        validationSchema={QuizSchema}\n        onSubmit={ (values, actions) => {         \n          onAdd(values);//додавання нового квіза при submit\n          actions.resetForm();//очищення полів форми при submit \n          console.log(recaptchaRef.current);\n          if (recaptchaRef.current) {\n            recaptchaRef.current.reset();\n            setCaptchaValue('');\n          }                   \n        }}\n        \n      >       \n        <StyledForm>\n            <StyledLabel >\n                Topic\n                <StyledField  name=\"topic\" placeholder=\"Topic\" />\n                <StyledErrMessage name= 'topic'/>\n            </StyledLabel>\n            <StyledLabel >\n                Time\n                <StyledField type='number' name=\"time\" placeholder=\"Time\" />\n                <StyledErrMessage name='time'/>\n            </StyledLabel>\n            <StyledLabel >\n                Questions\n                <StyledField type='number' name=\"questions\" placeholder=\"Questions\" />\n                <StyledErrMessage name= 'questions'/>\n            </StyledLabel>\n            <StyledLabel >\n                Level\n                <StyledField as=\"select\" name=\"level\">             \n                <option value=\"beginner\">Beginner</option>\n                <option value=\"intermediate\">Intermediate</option>\n                <option value=\"advanced\">Advanced</option>             \n                </StyledField>\n                <StyledErrMessage name= 'level'/>\n            </StyledLabel>            \n           <PracticeCaptcha ref={recaptchaRef} onChange={setCaptchaValue}/>  \n           {captchaValue  && <FormButton type='submit'>Add quiz</FormButton>}                          \n        </StyledForm>\n      </Formik>        \n    );\n}; \n","import { BackLink } from \"components/BackLink\";\nimport { ErrorMessage } from \"components/ErrorMessage\";\nimport { QuizForm } from \"components/QuizForm/QuizForm\";\nimport { createQuiz } from \"components/api\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\n\nexport default function CreateQuizPage() {\n\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);  \n\n    const addQuiz = async newQuiz => {  \n        try {\n        setLoading(true);\n        setError(false);\n        await createQuiz(newQuiz);\n        toast.success('Add quiz! Search in \"QuizListPage\"')     \n        // додавання quiz не потрібно, тому що в QuizzesPage при монтуванні завжди буде запит за свіжою інфою з беку\n        // setQuizItems(prevState =>[...prevState, quiz]);      \n        } catch (error) {\n        setError(true);\n        } finally{\n        setLoading(false);\n        }  \n    };  \n\n    return (\n        <>\n            <BackLink to=\"/quizzes\">\n                Back to quizzes\n            </BackLink>\n            <QuizForm onAdd ={addQuiz}/>\n            {loading && <b>Creating quiz...</b>} \n            {error && <ErrorMessage>Error! Please reload this page.</ErrorMessage>}\n        </>        \n    );\n};"],"names":["BackLink","_ref","to","children","_jsxs","Link","_jsx","IoIosArrowDropleft","ErrorMessage","styled","b","_templateObject","_taggedTemplateLiteral","p","theme","colors","errorColor","axios","defaults","baseURL","fetchQuizzes","async","get","data","fetchQuizById","concat","quizId","createQuiz","post","quiz","deleteQuizById","delete","forwardRef","ref","onChange","ReCAPTCHA","sitekey","value","console","log","StyledForm","Form","spacing","secondaryColor","radius","l","StyledLabel","label","_templateObject2","StyledField","Field","_templateObject3","borderColor","m","StyledErrMessage","_templateObject4","FormButton","button","_templateObject5","white","accentColor","QuizSchema","Yup","shape","topic","min","required","time","max","questions","level","oneOf","QuizForm","onAdd","captchaValue","setCaptchaValue","useState","recaptchaRef","useRef","Formik","initialValues","validationSchema","onSubmit","values","actions","resetForm","current","reset","name","placeholder","type","as","PracticeCaptcha","CreateQuizPage","loading","setLoading","error","setError","_Fragment","newQuiz","toast","success"],"sourceRoot":""}